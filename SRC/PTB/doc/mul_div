#include <stdio.h>

DD log2(DD i)
{
 DD t = 0;
 i = i >> 1;
 while(i)
 {
  i = i >> 1;
  t++;
 }
 return(t);
}

int main (void)
{
 DD res1,res2;
 DD d,l,s,m,a,r,n,t;
 DQ m_low,m_high,j,k;
 fprintf (stderr,"\n");
 fprintf (stderr,"Unsigned division by constant \n");
 fprintf (stderr,"=============================\n \n");
 fprintf (stderr,"enter divisor:");
 scanf ("%lu",&d);
 printf ("\n");
 if(d == 0)
 {
  goto printed_code;
 }
 if (d >= 0x80000000)
 {
  printf(";dividend:register or memory location \n");
  printf("\n");
  printf("CMP dividend,0%08lXh \n",d);
  printf("MOV EDX,0 \n");
  printf("SBB EDX,-1 \n");
  printf("\n");
  printf(";quotient now in EDX \n");
  goto printed_code;
 }
 /*Reduce divisor until it becomes odd */
 n =0;
 t =d;
 while(!(t & 1))
 {
  t >>= 1;
  n++;
 }
 if(t == 1)
 {
  if(n == 0)
  {
   printf(";dividend:register or memory location \n");
   printf("\n");
   printf("MOV EDX,dividend \n",n);
   printf("\n");
   printf(";quotient now in EDX \n");
  }
  else
  {
   printf(";dividend:register or memory location \n");
   printf("\n");
   printf("SHR dividend,%d \n",n);
   printf("\n");
   printf(";quotient replaced dividend \n");
  }
  goto printed_code;
 }
 /*Generate m,s for algorithm 0.*/
 l      = log2(t) + 1;
 j      = (((DQ)(0xffffffff)) % ((DQ)(t)));
 k      = (((DQ)(1)) << (32 + l)) / ((DQ)(0xffffffff - j));
 m_low  = (((DQ)(1)) << (32 + l)) / t;
 m_high = ((((DQ)(1)) << (32 + l)) + k) / t;
 while(((m_low >> 1) < (m_high >> 1)) && (l > 0))
 {
  m_low  = m_low  >> 1;
  m_high = m_high >> 1;
  l      = l - 1;
 }
 if((m_high >> 32) == 0)
 {
  m = ((DD)(m_high));
  s = l;
  a = 0;
 }
 /*Generate m,s for algorithm 1.*/
 else
 {
  s     = log2(t);
  m_low = (((DQ)(1)) << (32 + s)) / ((DQ)(t));
  r     = ((DD)((((DQ)(1)) << (32 + s)) % ((DQ)(t))));
  m     = (r < ((t>>1) + 1)) ? ((DD)(m_low)) : ((DD)(m_low)) + 1;
  a     = 1;
 }
 /*Reduce multiplier for either algorithm to smallest possible */
 while(!(m & 1))
 {
  m = m >> 1;
  s--;
 }
 /*Adjust multiplier for reduction of even divisors */
 s += n;
 if(a)
 {
  printf(";dividend:register other than EAX or memory location \n");
  printf("\n");
  printf("MOV EAX,0%08lXh \n",m);
  printf("MUL dividend \n");
  printf("ADD EAX,0%08lXh \n",m);
  printf("ADC EDX,0 \n");
  if(s)
  {
   printf("SHR EDX,%d \n",s);
  }
  printf("\n");
  printf(";quotient now in EDX \n");
 }
 else
 {
  printf(";dividend:register other than EAX or memory location \n");
  printf("\n");
  printf("MOV EAX,0%08lXh \n",m);
  printf("MUL dividend \n");
  if(s)
  {
   printf("SHR EDX,%d \n",s);
  }
  printf("\n");
  printf(";quotient now in EDX \n");
 }
 printed_code:
 fprintf(stderr,"\n");
 exit(0);
 return(0);
}
