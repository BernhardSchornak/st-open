          /*
           Use font 'DOS 850' or 'IBM 850' on non-OS/2 machines to display this file properly!
          ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
          º                          A P I - W R A P P E R  (32 BIT)                           ºÛ
          ºÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄºÛ
          º                          *** (C) ST-Open 1979 - 2010 ***                           ºÛ
          ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼Û
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
          º       THE CONTENT OF THIS FILE IS SUBJECT TO THE TERMS OF THE FT4FP-LICENSE        ºÛ
          ºÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄºÛ
          º You may copy and distribute this file as often as you want, but recipients are not ºÛ
          º allowed to pay anything for any copy of this file or its content. It isn't allowed ºÛ
          º to remove parts of this file or add third party content. It isn't allowed to abuse ºÛ
          º the copyrighted content or introduced techniques for commercial purposes. Whatever ºÛ
          º is derived from this file and its content must be freely available without charge. ºÛ
          º You are free to modify the content of this file if you want to. However, derivates ºÛ
          º of the content of this file or parts of it *still* are subject to the terms of the ºÛ
          º FT4FP license. Recipients neither are allowed to pay anything for the original nor ºÛ
          º for altered or derived replica.                                                    ºÛ
          ºÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄºÛ
          º       FREE THOUGHT FOR FREE PEOPLE (FT4FP) - KEEP CASH AWAY FROM KNOWLEDGE!        ºÛ
          ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼Û
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .include "..\\..\\..\\include\\yasm.h"
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ jump table                 ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .section .rdata, "dr"
          .p2align 4,0x00,15
    jtcmd:.quad    spinit
          .quad    notify
          .quad    edited
          .quad    setcur
          .quad    getcur
          .quad    getstc
          .quad    setstc
    jtefc:.quad    ec00                 # dec2D EA
          .quad    ec01                 # dec2Q EA
          .quad    ec04                 # hex2D EA
          .quad    ec04                 # hex2D EA
          .quad    ec04                 # hex2D EA
          .quad    ec05                 # hex2Q EA
          .quad    ec06                 # s2HMD EA
          .quad    ec07                 # s2DMY EA
          .quad    ec08                 # FDacc write
    jtdsp:.quad    t00
          .quad    t01
          .quad    t02
          .quad    t03
          .quad    t04
          .quad    t05
          .quad    t06
          .quad    t07
          .quad    t08
     mchr:.long    0x10, 0x20, 0x03, 0x05, 0x0A, 0x13, 0x0A, 0x0B, 0x50
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .text
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³                               S P I N B U T T O N S                                ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ INPUT  > RCX      spin number = entry number in FLD_SPN                            ³Û
          ³          RDX      SPN_* command                                                    ³Û
          ³          R08      numeric input    (optional)      ID + msg           WPARAM       ³Û
          ³          R09      address in/out   (optional)      NMHDR              LPARAM       ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ OUTPUT < RAX      **** ****        value if appropriate, else 0000 0000            ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ Commands          description                                                      ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ #  name           description               PAR 3               PAR 4              ³Û
          ³                                                                                    ³Û
          ³ 06 SPN_SETSTRUC   write 64 byte structure   -                   EA                 ³Û
          ³ 05 SPN_GETSTRUC   read  64 byte structure   -                   EA                 ³Û
          ³ 04 SPN_QUERY      get current content       -                   EA                 ³Û
          ³ 03 SPN_SET        set current content       number              EA                 ³Û
          ³ 02 SPN_EDITED     entryfield was edited     WPARAM              LPARAM             ³Û
          ³ 01 SPN_NOTIFY     WM_NOTIFY received        WPARAM              LPARAM             ³Û
          ³ 00 SPN_INIT       initialise spinbutton     HWND dialog         -                  ³Û
          ³                                                                                    ³Û
          ³ -        content ignored                                                           ³Û
          ³ EA       address of a buffer or SPN structure                                      ³Û
          ³ WPARAM   WPARAM from a WM_COMMAND or WM_NOTIFY message                             ³Û
          ³ LPARAM   LPARAM from a WM_COMMAND or WM_NOTIFY message                             ³Û
          ³ HWND     HWND of the dialog the spinbutton belongs to                              ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ Spinbutton types  description                              input   output          ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ 08 SPN_STR        use field as defined in SPN structure      R09      RAX   (EA)   ³Û
          ³ 07 SPN_DATE       date (YYYY-MM-DD or DD.MM.YYYY)            R08      EAX   (DMY)  ³Û
          ³ 06 SPN_TIME       time (HH:MM:SS.hh in 5 possible formats)   R08      EAX   (HMSh) ³Û
          ³ 05 SPN_HEX64      hexadecimal numbers with 16 digits         R08      RAX   (DQ)   ³Û
          ³ 04 SPN_HEX32                                8 digits         R08      EAX   (DD)   ³Û
          ³ 03 SPN_HEX16                                4 digits         R08      AX    (DW)   ³Û
          ³ 02 SPN_HEX08                                2 digits         R08      AL    (DB)   ³Û
          ³ 01 SPN_DEC64      decimal     numbers max. 20 digits         R08      RAX   (DQ)   ³Û
          ³ 00 SPN_DEC32                          max. 10 digits         R08      EAX   (DD)   ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ SPN structure     description                                                      ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ 00 DQ             minimum value or first entry in a datafield                      ³Û
          ³ 08 DQ             maximum value or last  entry                                     ³Û
          ³ 10 DQ             current value or entry number                                    ³Û
          ³ 18 DQ             HWND of the associated entryfield                                ³Û
          ³ 20 DD             ID   of the associated entryfield                                ³Û
          ³ 24 DD             ID   of the spinbutton (UpDown) control                          ³Û
          ³ 28 DQ             SPN_STR  : MemHandle of the field                                ³Û
          ³ 30 DD             spinbutton type                                                  ³Û
          ³ 34 DD             spinbutton flags                                                 ³Û
          ³ 38 DD             SPN_TIME : time format (0...4) as defined in tms.S               ³Û
          ³                   SPN_DATE : date format (0 = European, 1 = ISO)                   ³Û
          ³                   SPN_DECx : D2dec or Q2dec flags (pseudoFP, sign, digits)         ³Û
          ³ 3C DD             SPN_STR  : number of subfield                                    ³Û
          ³                                                                                    ³Û
          ³ ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿  ³Û
          ³ ³                minimum                ³                maximum                ³  ³Û
          ³ ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´  ³Û
          ³ ³                current                ³              HWND dialog              ³  ³Û
          ³ ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´  ³Û
          ³ ³   ID entryfield   ³   ID spinbutton   ³             MemHandle $$              ³  ³Û
          ³ ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´  ³Û
          ³ ³     spin type     ³    spin  flags    ³    type  flags    ³    subfield $$    ³  ³Û
          ³ ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ  ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ SPN flags         description                                                      ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ 80                -                                                                ³Û
          ³ 40                -                                                                ³Û
          ³ 20                -                                                                ³Û
          ³ 10                -                                                                ³Û
          ³ 08                -                                                                ³Û
          ³ 04                -                                                                ³Û
          ³ 02                -                                                                ³Û
          ³ 01                spinbutton engaged                                               ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
          .globl _STspn
   _STspn:subq     $0xF8,%rsp
          movq     _BNR(%rip),%rax                     # RAX = BNR
          nop
          movq     %rbp,0x90(%rsp)
          movq     %rsi,0x98(%rsp)
          movq     %rdi,0xA0(%rsp)
          movq     %rbx,0xA8(%rsp)
          movq     %r14,0xB0(%rsp)
          movq     %r13,0xB8(%rsp)
          movq     %r12,0xC0(%rsp)
          movq     %r11,0xC8(%rsp)
          movq     %r10,0xD0(%rsp)
          movq     %r9, 0xD8(%rsp)
          movq     %r8, 0xE0(%rsp)
          movq     %rdx,0xE8(%rsp)
          movq     %rcx,0xF0(%rsp)
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ prepare                    ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          movq     SPN_EA(%rax),%r14                   # R14 = EA
          movq     SPN_MH(%rax),%r11                   # R11 = MH
          movl     %ecx, %r13d                         # R13 = spin number
          movq     %rax, %rsi                          # RSI = BNR
          shll     $0x06,%r13d                         # R13 = offset struc
          testq    %r14, %r14                          # field loaded?
          je       ldfld
      L00:addq     %r14, %r13                          # R13 = EA struc
          cmpl     0x1C(%r11),%ecx                     # valid entry?
          jae      XIZ
          cmpl     $0x06,%edx                          # valid command?
          ja       XIZ
          testl    $0x01,0x34(%r13)                    # already running?
          jne      XIZ
          orb      $0x01,0x34(%r13)                    # set busy
          movq     0x00(%r13),%r12                     # R12 = min
          movq     0x08(%r13),%r11                     # R11 = max
          movq     0x10(%r13),%r10                     # R10 = cur
          movq     0x18(%r13),%rdi                     # RDI = HWND EFld
          movl     0x30(%r13),%ebx                     # RBX = spin type
          cmpq     %r11,%r12                           # min = max?
          cmove    %r11, %rax                          # return max and exit!
          je       XIR
          cmpl     $0x08,%ebx                          # valid type?
          ja       XIR
          jmp      *jtcmd(, %rdx, 8)
          /*

          RAX   -
          RBX   type
          RCX   spin number
          RDX   command
          RDI   HWND EFld
          RSI   BNR
          RBP   -
          R08   WPARAM or number
          R09   LPARAM or EA
          R10   cur
          R11   max
          R12   min
          R13   EA struc
          R14   EA field

          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ 00 SPN_INIT                               ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
   spinit:movl     0x24(%r13),%edx                     # RDX = ID   spn
          movl     0x20(%r13),%ebp                     # RBP = ID   EFld
          movq     %r8, %rcx                           # RCX = HWND dlg
          call     _WinId
          movl     %ebp,%edx                           # RDX = ID   EFld
          movq     %rax,%rbp                           # RBP = HWND spn
          leaq     mchr(%rip),%r9                      # R09 = EA   LUT
          call     _WinId
          movl     0x00(%r9, %rbx, 4),%r8d             # R08 = limit
          movq     %rax, 0x18(%r13)                    # store HWND EFld
          movq     %rax, %rdi                          # RDI = HWND EFld
          movq     %rax, %rcx                          # RCX = HWND EFld
          movl     $0xC5,%edx                          # RDX = EM_SETTEXTLIMIT
          xorl     %r9d, %r9d                          # R09 = NULL
          call     _SendM
          movq     %rbp, %rcx                          # RCX = HWND spn
          movl     $0x046F,%edx                        # RDX = UDM_SETRANGE32
          movl     $0x80000000,%r8d                    # R08 = min
          movl     $0x7FFFFFFF,%r9d                    # R09 = max
          call     _SendM
          addl     $0x02,%edx                          # RDX = UDM_SETPOS32
          xorl     %r8d, %r8d                          # R08 = 0
          xorl     %r9d, %r9d                          # R09 = NULL
          call     _SendM
          jmp      comsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ 01 SPN_NOTIFY                             ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
   notify:movq     %r10,%rax                           # RAX = cur
          movslq   0x1C(%r9),%rbp                      # RBP = sign extended delta
          cmpl     $0xFFFFFD2E,0x10(%r9)               # UDN_DELTAPOS?
          jne      XIR
          addq     %rbp,%r10                           # cur + delta
          cmovs    %r11,%r10                           # max if underflow
          jmp      comsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ 02 SPN_EDITED                             ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
   edited:movq     %rdi, %rcx                          # RCX = HWND
          leaq     0x30(%rsp),%rdx                     # RDX = buffer
          movl     $0x50,%r8d                          # R08 = size
          call     _WnQTx
          movq     %rdx, %rcx                          # RCX = EA buffer
          jmp      *jtefc(, %rbx, 8)
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_DEC32     ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
     ec00:call     _dec2D
          movq     %rax,%r10                           # update cur
          jmp      comsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_DEC64     ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
     ec01:call     _dec2Q
          movq     %rax,%r10                           # update cur
          jmp      comsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_HEX08-32  ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
     ec04:call     _hex2D
          movq     %rax,%r10                           # update cur
          jmp      comsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_HEX64     ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
     ec05:call     _hex2Q
          movq     %rax,%r10                           # update cur
          jmp      comsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_TIME      ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
     ec06:call     _s2HMS
          movq     %rax,%r10                           # update cur
          jmp      comsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_DATE      ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
     ec07:call     _s2DMY
          movq     %rax,%r10                           # update cur
          jmp      comsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_STR_FIELD ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
     ec08:movq     %rdx, 0x20(%rsp)                    # P_5 = EA buffer
          movq     0x28(%r13),%rcx                     # RCX = MemHandle
          movl     %r10d,     %edx                     # RDX = entry
          movl     0x3C(%r13),%r8d                     # R08 = subfield
          movl     $0x02,     %r9d                     # R09 = FDA_WRITE
          call     _FDacc
          movq     %r10,%rax                           # RAX = cur
          jmp      XIR
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ 03 SPN_SET                                ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
   setcur:movq     %r8,%r10                            # R10 = input
          jmp      comsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ 04 SPN_QUERY                              ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
   getcur:movq     %r10,%rax                           # RAX = cur
          jmp      XIR
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ 05 SPN_GETSTRUC                           ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
   getstc:movdqa   0x00(%r13),%xmm0                    # copy struc -> output
          movdqa   0x10(%r13),%xmm1
          movdqa   0x20(%r13),%xmm2
          movdqa   0x30(%r13),%xmm3
          movdqu   %xmm0,0x00(%r9)
          movdqu   %xmm1,0x10(%r9)
          movdqu   %xmm2,0x20(%r9)
          movdqu   %xmm3,0x30(%r9)
          jmp      XIZ
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ 06 SPN_SETSTRUC                           ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
   setstc:movdqa   0x00(%r9),%xmm0                     # copy input -> struc
          movdqa   0x10(%r9),%xmm1
          movdqa   0x20(%r9),%xmm2
          movdqa   0x30(%r9),%xmm3
          movdqu   %xmm0,0x00(%r13)
          movdqu   %xmm1,0x10(%r13)
          movdqu   %xmm2,0x20(%r13)
          movdqu   %xmm3,0x30(%r13)
          movq     0x00(%r9),%r12                      # R12 = min
          movq     0x08(%r9),%r11                      # R11 = max
          movq     0x10(%r9),%r10                      # R10 = cur
          movq     0x18(%r9),%rdi                      # RDI = HWND EFld
          movl     0x30(%r9),%ebx                      # RBX = type
          testl    %r8d,%r8d                           # return w/o display?
          jne      XIZ
          jmp      comsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ common: display                           ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

          RAX   -                 subfield
          RBX   type
          RCX   -                 MemHandle
          RDX   -
          RDI   HWND EFld
          RSI   BNR
          RBP   -                 type flags
          R08   -                 EA buffer
          R09   -
          R10   cur
          R11   max
          R12   min
          R13   EA struc
          R14   EA field

          */
          .p2align 4,,15
    comsp:cmpq     %r11,%r10                           # above?
          cmova    %r12,%r10                           # wrap
          cmpq     %r12,%r10                           # below?
          cmovb    %r11,%r10                           # wrap
          movq     0x28(%r13),%rcx                     # RCX = MemHandle
          movl     0x38(%r13),%ebp                     # RBP = type flags
          movl     0x3C(%r13),%eax                     # RAX = subfield
          leaq     0x30(%rsp),%r14                     # R14 = EA buffer
          movq     %r10,0x10(%r13)                     # store
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ create output string       ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          jmp      *jtdsp(, %rbx, 8)                   # jump table <type>
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_DEC32     ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
      t00:movq     %r10,%rcx                           # RCX = cur
          movq     %r14,%rdx                           # RDX = EA buffer
          movl     %ebp,%r8d                           # R08 = flags
          call     _D2dec
          jmp      setsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_DEC64     ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
      t01:movq     %r10,%rcx                           # RCX = cur
          movq     %r14,%rdx                           # RDX = EA buffer
          movl     %ebp,%r8d                           # R08 = flags
          call     _Q2dec
          jmp      setsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_HEX08     ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
      t02:movq     %r10,%rcx                           # RCX = cur
          movq     %r14,%rdx                           # RDX = EA buffer
          call     _B2hex
          jmp      setsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_HEX16     ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
      t03:movq     %r10,%rcx                           # RCX = cur
          movq     %r14,%rdx                           # RDX = EA buffer
          call     _W2hex
          jmp      setsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_HEX32     ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
      t04:movq     %r10,%rcx                           # RCX = cur
          movq     %r14,%rdx                           # RDX = EA buffer
          call     _D2hex
          jmp      setsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_HEX64     ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
      t05:movq     %r10,%rcx                           # RCX = cur
          movq     %r14,%rdx                           # RDX = EA buffer
          call     _Q2hex
          jmp      setsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_TIME      ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
      t06:movl     %r10d,%ecx                          # RCX = cur
          call     _chkHMS
          movl     %eax, %ecx                          # RCX = proper HMS
          movl     %eax, 0x10(%r13)                    # store
          movq     %r14, %rdx                          # RDX = EA buffer
          movl     %ebp, %r8d                          # R08 = flags
          call     _t2out
          jmp      setsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_DATE      ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
      t07:movl     %r10d,%ecx                          # RCX = cur
          call     _chkDMY
          movl     %eax, %ecx                          # RCX = proper HMS
          movl     %eax,0x10(%r13)                     # store
          movq     %r14, %rdx                          # RDX = EA buffer
          testl    %ebp,%ebp
          jne      0f
          call     _d2out
          jmp      setsp
        0:call     _d2iso
          jmp      setsp
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ SPN_STR_FIELD ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
      t08:movl     %r10d,%edx                          # RDX = entry
          movl     %eax, %r8d                          # R08 = subfield
          movl     $0x07,%r9d                          # R09 = FDA_ADDRESS
          call     _FDacc
          movq     %rax, %r14                          # R14 = EA string
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ set spinbutton  ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
    setsp:movq     %rdi, %rcx                          # RCX = HWND EFld
          movq     %r14, %rdx                          # RDX = EA buffer
          movl     $0x50,%r8d                          # R08 = size
          call     _WnSTx
          movq     %r10, %rax                          # RAX = cur
          jmp      XIR
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ load field                                           ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
    ldfld:pxor     %xmm0,%xmm0                         # XM0 = 0
          xorl     %eax,       %eax                    # RAX = 0
          leaq     0x20(%rsp), %rcx                    # RCX = LD
          movl     $0xFFFFFF01,0x30(%rsp)              # spinbuttons
          movl     $0x23,      0x34(%rsp)              # r, w, static
          movq     %rax,       0x38(%rsp)              # clear LD
          movdqa   %xmm0,      0x40(%rsp)
          movdqa   %xmm0,      0x50(%rsp)
          movdqa   %xmm0,      0x60(%rsp)
          call     _LDreq
          testl    %eax,%eax                           # error?
          jne      XIT
          movq     0x20(%rsp), %r14                    # R14 = EA
          movq     0x38(%rsp), %r11                    # R11 = MH
          addq     $0x0100,    %r14                    # R14 = EA data
          movl     0xF0(%rsp), %ecx                    # RCX = spin number
          movq     %r11,SPN_MH(%rsi)                   # store MH
          movq     %r14,SPN_EA(%rsi)                   #       EA
          orl      $0x04, 0x08(%r11)                   # set LDR_CHANGED
          jmp      L00
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ exit                                                 ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
      XIZ:xorq     %rax,%rax
      XIR:andl     $0xFE,0x34(%r13)
      XIT:movq     0x90(%rsp),%rbp
          movq     0x98(%rsp),%rsi
          movq     0xA0(%rsp),%rdi
          movq     0xA8(%rsp),%rbx
          movq     0xB0(%rsp),%r14
          movq     0xB8(%rsp),%r13
          movq     0xC0(%rsp),%r12
          movq     0xC8(%rsp),%r11
          movq     0xD0(%rsp),%r10
          movq     0xD8(%rsp),%r9
          movq     0xE0(%rsp),%r8
          movq     0xE8(%rsp),%rdx
          movq     0xF0(%rsp),%rcx
          addq     $0xF8,%rsp
          ret
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .comm    _BNR,   8, 3
