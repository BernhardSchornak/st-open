          /*
           Use font 'DOS 850' or 'IBM 850' on non-OS/2 machines to display this file properly!
          ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
          º                          L A N G U A G E   S U P P O R T                           ºÛ
          ºÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄºÛ
          º                          *** (C) ST-Open 1979 - 2010 ***                           ºÛ
          ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼Û
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
          º       THE CONTENT OF THIS FILE IS SUBJECT TO THE TERMS OF THE FT4FP-LICENSE        ºÛ
          ºÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄºÛ
          º You may copy and distribute this file as often as you want, but recipients are not ºÛ
          º allowed to pay anything for any copy of this file or its content. It isn't allowed ºÛ
          º to remove parts of this file or add third party content. It isn't allowed to abuse ºÛ
          º the copyrighted content or introduced techniques for commercial purposes. Whatever ºÛ
          º is derived from this file and its content must be freely available without charge. ºÛ
          º You are free to modify the content of this file if you want to. However, derivates ºÛ
          º of the content of this file or parts of it *still* are subject to the terms of the ºÛ
          º FT4FP license. Recipients neither are allowed to pay anything for the original nor ºÛ
          º for altered or derived replica.                                                    ºÛ
          ºÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄºÛ
          º       FREE THOUGHT FOR FREE PEOPLE (FT4FP) - KEEP CASH AWAY FROM KNOWLEDGE!        ºÛ
          ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼Û
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ The definition for all language fields is:                                         ³Û
          ³                                                                                    ³Û
          ³ always  :   subfield  00        English (fallback for multilangual apps)           ³Û
          ³             subfields 01...0F   up to 15 translations                              ³Û
          ³                                                                                    ³Û
          ³ default :   subfield  10        resource IDs           (menu and window texts)     ³Û
          ³                                                                                    ³Û
          ³ optional:   subfield  10        English second strings (help and topic  texts)     ³Û
          ³             subfields 11...1F   up to 15 translations  (help and topic  texts)     ³Û
          ³                                                                                    ³Û
          ³ If more than 15 languages are supported by your application:                       ³Û
          ³                                                                                    ³Û
          ³ 1. Copy the selected language's fields FFFFFF12 and FFFFFF13 to the DATA folder.   ³Û
          ³ 2. Copy the selected language's fields err.dat, hlp.dat, nsm.dat and top.dat to    ³Û
          ³    the SYST folder.                                                                ³Û
          ³                                                                                    ³Û
          ³ Keep original language fields in separate folders. Overwrite fields in DATA / SYST ³Û
          ³ with copies taken from the selected language folder. A system function is planned, ³Û
          ³ but there's too much other work, so it might take some time...                     ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .include "..\\..\\..\\include\\yasm.h"
          .section .rdata, "dr"
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4, 0x00, 15
      LC0:.ascii   "nsm.dat / err.dat?"
          .byte    0x00, 0x00
      LC1:.ascii   "O K"
          .byte    0x00
      LC2:.ascii   "Debug"
          .byte    0x00, 0x00, 0x00
      LC3:.ascii   "STsmsg"
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .text
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³  M N U t x t               S E T   M E N U   T E X T S                             ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ CALL   - MNUtxt(hwnd, first, last);                                                ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ INPUT  > RCX  hmenu       menu handle                                              ³Û
          ³          RDX  first       first entry (in field FFFFFF12)                          ³Û
          ³          R08  last        last entry  (in field FFFFFF12)                          ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ OUTPUT < RAX  0000 0000   ok                                                       ³Û
          ³               0000 000A   ERR_PAR_BELOW (last below first)                         ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ The language is defined with STV_USR_LANGUAGE (Cxx) or _USRLNG (assembler). Please ³Û
          ³ read the HTML tutorial 'Language Support' for more information.                    ³Û
          ³                                                                                    ³Û
          ³ MNUtxt() sets (last - first) menu items in the menu assigned to hwnd. The resource ³Û
          ³ IDs are taken from sub-field #10. Any entry is ignored if its resource ID is zero. ³Û
          ³ If a resource ID is present, but the text is an empty string, the menu item is re- ³Û
          ³ moved from this menu, avoiding empty menu items. If last is -equal- to first, only ³Û
          ³ one menu item (specified by the first entry) is set.                               ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
          .globl   _MNUtxt
          .def     _MNUtxt; .scl 2; .type 32; .endef
  _MNUtxt:movq     $mnutxt,%rax
          jmp      0f
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³  D L G t x t             S E T   D I A L O G   T E X T S                           ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ CALL   - DLGtxt(hwnd, title, first, last);                                         ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ INPUT  > RCX  hwnd        dialog window's HWND                                     ³Û
          ³          RDX  title       title entry (field FFFFFF12 / FFFFFF13)                  ³Û
          ³          R08  first       first entry (field FFFFFF12 / FFFFFF13)                  ³Û
          ³          R09  last        last entry  (field FFFFFF12 / FFFFFF13)                  ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ OUTPUT < RAX  0000 0000   ok                                                       ³Û
          ³               **** ****   errors returned by called functions                      ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ Language is determined by USRLNG[BNR]. 16 languages are recognised by DLGtxt() for ³Û
          ³ now. If more than 16 languages are required, you have to provide multiple versions ³Û
          ³ of fields FFFFFF12 (user) and FFFFFF13 (system) in a separate folder and copy user ³Û
          ³ requested languages (the corresponding fields) to the DATA folder on demand.       ³Û
          ³                                                                                    ³Û
          ³ DLGtxt() sets the title and (last - first) window texts in the dialog window hwnd. ³Û
          ³ The resource IDs are taken from subfield #10. If a resource ID is zero, this entry ³Û
          ³ is ignored. The number of the window title has to be passed on its own (titles use ³Û
          ³ another API call). If you want to display just a title, set first to something be- ³Û
          ³ low last to force a negative loop count.                                           ³Û
          ³                                                                                    ³Û
          ³ The entry number for [title] is completely independent from [first] and [last]. It ³Û
          ³ can be any entry in field FFFFFF12, while [first] and [last] are treated as conti- ³Û
          ³ nuous chain of entries (beginning at [first], ending with [last]).                 ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ NOTE: If DLG_TY is not zero, DLGtxt() loads field FFFFFF13 (system). There is *no* ³Û
          ³       reason to set DLG_TY (except you want to show system dialogs on your own).   ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
          .globl   _DLGtxt
          .def     _DLGtxt; .scl 2; .type 32; .endef
  _DLGtxt:movq     $dlgtxt,%rax
          jmp      0f
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³  ErrMgr                    E r r o r   H a n d l i n g                             ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ CALL   - ErrMgr(error);                                                            ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ INPUT  > RCX  error       error number as defined in HERR.H                        ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ OUTPUT < RAX  0000 0000   Loader not available or ERR_NO_ERROR                     ³Û
          ³               0000 0001   user pushed button 1                                     ³Û
          ³               0000 0002                      2                                     ³Û
          ³               0000 0003                      3                                     ³Û
          ³               **** ****   invalid - numbers above 3 should never be returned!      ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
          .globl   _ErrMgr
          .def     _ErrMgr; .scl 2; .type 32; .endef
  _ErrMgr:movq     $errmgr,%rax
          jmp      0f
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³                             ErrMgr() DIALOG PROCEDURE                              ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ CALL   - DO NOT CALL THIS INTERNAL FUNCTION!                                       ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ INPUT  > RCX  HWND                                                                 ³Û
          ³          RDX  message                                                              ³Û
          ³          R08  lParam                                                               ³Û
          ³          R09  wParam                                                               ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ OUTPUT < RAX  **** ****   depends on message                                       ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ The global variable ERR_TY determines which messages are loaded. If it is not set, ³Û
          ³ SyMsg() loads the application messages "nsm.dat" and opens a dialog with dark blue ³Û
          ³ background. If ERR_TY is not zero, system messages "err.dat" are loaded and a dia- ³Û
          ³ log with dark red background is opened.                                            ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ SyMsg() can be fed with one optional string and up to four numeric values:         ³Û
          ³                                                                                    ³Û
          ³ STV_MSG_ADDR   EA of the string to be displayed                                    ³Û
          ³ STV_MSG_VAR1   number to be displayed as parameter 1                               ³Û
          ³ STV_MSG_VAR2                                       2                               ³Û
          ³ STV_MSG_VAR3                                       3                               ³Û
          ³ STV_MSG_VAR4                                       4                               ³Û
          ³ STV_MSG_FLAG   control flags:                                                      ³Û
          ³                               MSG_VAR1_ON    0x00000001   show variable 1          ³Û
          ³                               MSG_VAR2_ON    0x00000002   show variable 2          ³Û
          ³                               MSG_VAR3_ON    0x00000004   show variable 3          ³Û
          ³                               MSG_VAR4_ON    0x00000008   show variable 4          ³Û
          ³                                                                                    ³Û
          ³ If the optional parameters are omitted, no additional info is displayed. Variables ³Û
          ³ are cleared after all parameters are written to screen.                            ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ If the message is an empty string or the message number multiplied by four exceeds ³Û
          ³ the amount of entries defined in the field header, SyMsg() shows entry number zero ³Û
          ³ by default ("message unknown or passed message number out of range").              ³Û
          ³                                                                                    ³Û
          ³ If message 0 contains an empty string, SyMsg() displays a quite lonesome OK button ³Û
          ³ in an empty dialog box. It is recommended to set message 0 to the standard message ³Û
          ³ text mentioned in the last paragraph...                                            ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ If a button text is an empty string, the button is hidden. Because the user has no ³Û
          ³ chance to close the dialog if no buttons are displayed, SyMsg() automatically adds ³Û
          ³ an OK button if all three button texts are empty strings.                          ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
          .def     SyMsg; .scl 2; .type 32; .endef
    SyMsg:movq     $errprc,%rax
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³                               D I S T R I B U T O R                                ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ This distributor catches calls to MNUtxt(), DLGtxt() and ErrMgr() if the Loader is ³Û
          ³ not available, yet. This might be neccessary if an application moves LDinit() down ³Û
          ³ below the window creation. In this case, MNUtxt(), DLGtxt() and ErrMgr() will fail ³Û
          ³ with ERR_LDR_ERROR without performing the requested action.                        ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
        0:negl     _LDR_AVAIL(%rip)             # loader active?
          jne      1f
          movl     $0x10,%eax                   # ERR_LDR_ERROR
          ret
          .p2align 4,,15
        1:subq     $0xF8,%rsp
          nop
          nop
          movq     %r12,0xA0(%rsp)
          movq     %rbp,0xA8(%rsp)
          movq     %rsi,0xB0(%rsp)
          movq     %rdi,0xB8(%rsp)
          movq     %rbx,0xC0(%rsp)
          movq     %r11,0xC8(%rsp)
          movq     %r10,0xD0(%rsp)
          movq     %r9, 0xD8(%rsp)
          movq     %r8, 0xE0(%rsp)
          movq     %rdx,0xE8(%rsp)
          movq     %rcx,0xF0(%rsp)
          movq     _BNR(%rip),%rsi              # RSI = BNR
          jmp      *%rax
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³                                  M N U t x t ( )                                   ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ RCX   HWND                                                                         ³Û
          ³ RDX   first entry                                                                  ³Û
          ³ R08   last entry                                                                   ³Û
          ³ RSI   BNR                                                                          ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ NOTE: Menus are application-specific controls. It is -strongly- recommended to use ³Û
          ³ entries 00 and up, corresponding to the hierarchy of your menuitems. No popup menu ³Û
          ³ has an identifier, so MNUtxt() has to set menu texts the complicated way. You have ³Û
          ³ to start with the texts for the main menu, followed by the texts for the submenus. ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
   mnutxt:movq     %rcx,%rbp                    # RBP = HWND parent
          movl     %edx,%ebx                    # RBX = first entry
          movl     %r8d,%edi                    # RDI = last  entry
          movl     $0x0A,%eax                   # RAX = ERR_PAR_BELOW
          movl     USRLNG(%rsi),%edx            # RDX = STV_USR_LANGUAGE
          leaq     0x20(%rsp),%rcx              # RCX = LD
          pxor     %xmm0,%xmm0
          subl     %ebx,%edi                    # RDI = cnt
          js       XITC
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ set LD structure       ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          movdqa   %xmm0,0x20(%rsp)
          movl     $0xFFFFFF12,0x30(%rsp)       # LD.FldNr = FFFFFF12
          movl     $0x00000021,0x34(%rsp)       # LD.LdCtl = r, static
          movq     %xmm0,0x38(%rsp)
          movdqa   %xmm0,0x40(%rsp)
          movdqa   %xmm0,0x50(%rsp)
          movdqa   %xmm0,0x60(%rsp)
          movdqa   %xmm0,0x70(%rsp)
          andl     $0x0F,%edx                   # EDX = 00...0F
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ load field FFFFFF12    ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          call     _LDreq
          movq     0x20(%rsp),%r10              # R10 = EA field
          movq     0x38(%rsp),%r11              # R11 = MemHandle
          testl    %eax,%eax                    # failed?
          jne      XITC
          movl     0x60(%r10, %rdx, 4),%esi     # RSI = offset string OT
          movl     0xA0(%r10),%r12d             # R12 =        IDs
          addq     %r10,%r12                    # R12 = EA IDs
          addq     %r10,%rsi                    # RSI = EA string OT
          movq     %rbp,%rcx                    # RCX = HWND
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ set menu texts         ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
        0:movl     0x00(%r12, %rbx, 4),%edx     # RDX = ID
          movl     0x00(%rsi, %rbx, 4),%r8d     # R08 = offset string
          testl    %edx,%edx                    # zero ID?
          je       2f
          testl    %r8d,%r8d                    # empty string?
          je       1f
          addq     %r10,%r8                     # R08 = EA string
          call     _MnSTx
          jmp      2f
        1:call     _MnDel
        2:incl     %ebx                         # next entry
          decl     %edi                         # cnt--
          jns      0b
          movq     %r11,%rcx                    # RCX = MemHandle
          call     _LDfre
          jmp      XITZ
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³                                  D L G t x t ( )                                   ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ RCX   HWND       RSI   BNR                                                         ³Û
          ³ RDX   title                                                                        ³Û
          ³ R08   first                                                                        ³Û
          ³ R09   last                                                                         ³Û
          ³ RSI   BNR                                                                          ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
   dlgtxt:movq     %rcx,%rbp                    # RBP = HWND parent
          movl     %edx,%ebx                    # RBX = title
          movl     %r8d,%edi                    # RDI = first entry
          pxor     %xmm0,%xmm0                  # XM0 = 0
          xorl     %eax,%eax                    # RAX = 0
          movl     $0xFFFFFF12,%r10d            # R10 = LD.FldNr (user)
          movl     $0xFFFFFF13,%r11d            # R11 =          (system)
          movl     USRLNG(%rsi),%edx            # RDX = STV_USR_LANGUAGE
          negl     DLG_TY(%rsi)                 # STV_DLG_TEXT = user?
          cmove    %r10,%r11                    # R11 = field number
          leaq     0x20(%rsp),%rcx              # RCX = LD
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ set LD structure       ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          movdqa   %xmm0,0x20(%rsp)
          movl     %r11d,0x30(%rsp)             # LD.FldNr = FFFFFF12/13
          movl     $0x21,0x34(%rsp)             # LD.LdCtl = r, static
          movq     %rax, 0x38(%rsp)
          movdqa   %xmm0,0x40(%rsp)
          movdqa   %xmm0,0x50(%rsp)
          movdqa   %xmm0,0x60(%rsp)
          movdqa   %xmm0,0x70(%rsp)
          andl     $0x0F,%edx                   # EDX = 00...0F
          movl     %eax ,DLG_TY(%rsi)           # reset DLG_TY
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ load field FFFFFF12/13 ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          call     _LDreq
          movq     0x20(%rsp),%r10              # R10 = EA field
          movq     0x38(%rsp),%r11              # R11 = MemHandle
          testl    %eax,%eax                    # failed?
          jne      XITC
          movl     0x60(%r10, %rdx, 4),%esi     # RSI = offset string OT[lang]
          movl     0xA0(%r10),%r12d             # R12 =        IDs
          movl     %r8d,%ebx                    # RBX = first
          addq     %r10,%rsi                    # RSI = EA string OT
          addq     %r10,%r12                    # R12 =    IDs
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ set texts              ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          movl     0x00(%rsi, %rbx, 4),%edx     # RDX = offset title
          movq     %rbp,%rcx                    # RCX = HWND
          addq     %r10,%rdx                    # RDX = EA title
          call     _WnSTx
          subl     %edi,%r9d                    # R09 = cnt
          js       2f
        0:movl     0x00(%rsi, %rdi, 4),%r8d     # R08 = offset string
          movl     0x00(%r12, %rdi, 4),%edx     # RDX = ID
          incl     %edi                         # next entry
          addq     %r10,%r8                     # R08 = EA string
          testl    %edx,%edx                    # zero ID?
          je       1f
          call     _WnSDT
        1:decl     %r9d
          js       0b
        2:movq     %r11,%rcx                    # RCX = MemHandle
          call     _LDfre
          jmp      XITZ
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³                                  E r r M g r ( )                                   ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ RCX  error                                                                         ³Û
          ³ RSI  BNR                                                                           ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
   errmgr:movl     %ecx,MSGRPL(%rsi)            # STV_MSG_REPLY
          testl    %ecx,%ecx                    # error = 0?
          je       XITZ
          leaq     SyMsg(%rip),%rcx             # RCX = PFNWP
          leaq     LC3(%rip),%rdx               # RDX = ID
          call     _DBox
          movl     MSGRPL(%rsi),%eax            # get RC
          jmp      XITC
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³                                  E r r P r c ( )                                   ³Û
          ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´Û
          ³ RCX  HWND                                                                          ³Û
          ³ RDX  message                                                                       ³Û
          ³ R08  lParam                                                                        ³Û
          ³ R09  wParam                                                                        ³Û
          ³ RSI  BNR                                                                           ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
   errprc:movq     %rcx,%rdi                    # RDI = HWND
          andl     $0xFFFF,%r8d                 # R08 = ID
          subl     $0x0111,%edx                 # WM_COMMAND?
          je       L02
          incl     %edx                         # WM_INITDIALOG?
          jne      XITZ
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ WM_INITDLG                       ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          movl     $0xFFFFFFF9,%eax             # RBX  = FFFFFFF9 (system)
          movl     $0xFFFFFFF5,%ebx             # RBX  = FFFFFFF5 (user)
          pxor     %xmm0,%xmm0
          negl     ERR_TY(%rsi)                 # STV_ERR_TYPE = 0?
          cmove    %ebx,%eax                    # EAX = field number
          leaq     0x20(%rsp),%rcx              # RCX  = LD
          movl     MSGRPL(%rsi),%ebx            # RBX  = msg number
          movl     USRLNG(%rsi),%edx            # RDX = language
          movdqa   %xmm0,0x20(%rsp)
          movl     %eax, 0x30(%rsp)             # LD.FldNr
          movl     $0x21,0x34(%rsp)             # LD.LdCtl (r, static)
          movq     %xmm0,0x38(%rsp)
          movdqa   %xmm0,0x40(%rsp)
          movdqa   %xmm0,0x50(%rsp)
          movdqa   %xmm0,0x60(%rsp)
          call     _LDreq
          movq     0x20(%rsp),%rcx              # RCX = EAmsg
          incl     %ebx                         # msg00 is entry 4
          andl     $0x0F,%edx                   # make language valid
          testl    %eax,%eax
          jne      L00
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ get text offsets       ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          shll     $0x02,%ebx                   # RBX = msg * 4
          movl     0x60(%rcx, %rdx, 4),%r9d     # R09 = OFsub
          movq     0x38(%rsp),%rbp              # RBP = MHmsg
          movl     $0x01,%edx                   # RDX = flag
          cmpl     0x3C(%rcx),%ebx              # out of range?
          cmovae   %eax,%ebx                    # use default
          addq     %rcx,%r9                     # R09 = EAsub
          movl     0x00(%r9, %rbx, 4),%eax      # RAX = msg
          movl     0x04(%r9, %rbx, 4),%r10d     # R10 = btn1
          movl     0x08(%r9, %rbx, 4),%r11d     # R11 = btn2
          movl     0x0C(%r9, %rbx, 4),%r12d     # R12 = btn3
          testl    %eax,%eax                    # msg empty?
          cmove    0x00(%r9, %rbx, 4),%eax      # RAX = msg
          leaq     LC1(%rip),%rbx               # RBX = EA OK
          addq     %rcx, %rax                   # RAX = EA txtmsg
          movl     %r10d,%edx                   # RDX = sum[offsets]
          addq     %rcx, %r10                   # R10 = EA txtbtn1
          addl     %r11d,%edx                   # RDX = sum[offsets]
          addq     %rcx, %r11                   # R11 = EA txtbtn2
          addl     %r12d,%edx                   # RDX = sum[offsets]
          addq     %rcx, %r12                   # R12 = EA txtbtn3
          testl    %edx, %edx                   # all empty?
          cmove    %rbx, %r11                   # R11 = OK
          movq     %rcx, %rbx                   # RBX = EAmsg
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ set message + buttons  ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          movq     %rdi,%rcx                    # RCX = HWND
          movl     $0x08D0,%edx                 # RDX = ID MLE
          movq     %rax,%r8
          call     _WnSDT
          incl     %edx                         # RDX = ID BTN 1
          cmpq     %rbx,%r10
          jne      0f
          xorl     %r8d,%r8d                    # R08 = hide
          call     _CtlSh
          jmp      1f
        0:movq     %r10,%r8
          call     _WnSDT
        1:incl     %edx                         # RDX = ID BTN 2
          cmpq     %rbx,%r11
          jne      2f
          xorl     %r8d,%r8d                    # R08 = hide
          call     _CtlSh
          jmp      3f
        2:movq     %r11,%r8
          call     _WnSDT
        3:incl     %edx                         # RDX = ID BTN 3
          cmpq     %rbx,%r12
          jne      4f
          xorl     %r8d,%r8d                    # R08 = hide
          call     _CtlSh
          jmp      5f
        4:movq     %r12,%r8
          call     _WnSDT
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ unload field           ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
        5:movq     %rbp,%rcx                    # RCX = MH
          call     _LDfre
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ display parameters     ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          movq     MSG_V1(%rsi),%rcx            # RCX = MSG_V1
          leaq     SMSGBF(%rsi),%rdx            # RDX = EA buffer
          xorl     %r8d,%r8d                    # R08 = 20 digits unsigned
          call     _Q2hex
          addq     $0x20,%rdx
          call     _Q2dec
          movq     MSG_V2(%rsi),%rcx            # RCX = MSG_V2
          addq     $0x20,%rdx
          call     _Q2hex
          addq     $0x20,%rdx
          call     _Q2dec
          movq     MSG_V3(%rsi),%rcx            # RCX = MSG_V3
          addq     $0x20,%rdx
          call     _Q2hex
          addq     $0x20,%rdx
          call     _Q2dec
          movq     MSG_V4(%rsi),%rcx            # RCX = MSG_V4
          addq     $0x20,%rdx
          call     _Q2hex
          addq     $0x20,%rdx
          call     _Q2dec
          movq     %rdi,%rcx                    # RCX = HWND
          movl     $0x08D8,%edx                 # RDX = ID V1hex
          leaq     SMSGBF(%rsi),%r8             # R08 = EA buffer
          movl     $0x08,%ebx                   # RBX = cnt
        6:call     _WnSDT
          incl     %edx
          addq     $0x20,%r8
          decl     %ebx
          jne      6b
          movq     MSGADR(%rsi),%r8             # R09 = MSGADR
          call     _WnSDT
          jmp      L01
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ load failed            ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
      L00:movq     %rdi,%rcx
          movl     $0x08D8,%edx
          leaq     LC0(%rip),%r8                # 'nsm.dat / err.dat?'
          call     _WnSDT
          incl     %edx                         # BTN 1
          xorq     %r8,%r8                      # hide
          call     _CtlSh
          incl     %edx                         # BTN 2
          leaq     LC1(%rip),%r8                # 'O K'
          call     _WnSDT
          incl     %edx                         # BTN 3
          xorq     %r8,%r8                      # hide
          call     _CtlSh
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ clear parameters       ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
      L01:pxor     %xmm0,%xmm0
          movdqa   %xmm0,MSGADR(%esi)           # reset MSGADR, MSG_V1
          movdqa   %xmm0,MSG_V2(%esi)           #       MSG_V2, MSG_V3
          movdqa   %xmm0,MSG_V4(%esi)           #       MSG_V4, MSGRPL, ERR_TY
          call     _CtrWn
          movl     $0x01,%eax
          jmp      XITC
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³ WM_COMMAND                       ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
      L02:subl     $0x08D0,%r8d
          jbe      XITZ
          cmpl     $0x03,%r8d
          ja       XITZ
          movl     %r8d,MSGRPL(%esi)
          movq     %rdi,%rcx
          call     _KillDlg
          /*
          ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
          ³                               C O M M O N   E X I T                                ³Û
          ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙÛ
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .p2align 4,,15
     XITZ:xorl     %eax,%eax
     XITC:movq     0xA0(%esp),%r12
          movq     0xA8(%esp),%rbp
          movq     0xB0(%esp),%rsi
          movq     0xB8(%esp),%rdi
          movq     0xC0(%esp),%rbx
          movq     0xC8(%esp),%r11
          movq     0xD0(%esp),%r10
          movq     0xD8(%esp),%r9
          movq     0xE0(%esp),%r8
          movq     0xE8(%esp),%rdx
          movq     0xF0(%esp),%rcx
          addq     $0xF8,%rsp
          ret
          /*
          ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
          ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼Û
            ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
          */
          .comm    _BNR,       8, 3
          .comm    _LDR_AVAIL, 8, 3
